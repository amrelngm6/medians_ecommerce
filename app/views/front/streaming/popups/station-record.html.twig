<div x-data="{}" class="fixed inset-0  overflow-y-auto hidden transition-all transition"  id="station-record-popup" role="dialog" aria-modal="true" data-headlessui-state="open" style="z-index:99">
	<div class="min-h-full text-center">
		<div class="fixed inset-0 bg-download_popup blurFilter opacity-100" id="headlessui-dialog-overlay-:r3n:" aria-hidden="true" data-headlessui-state="open"></div>
		<span class="inline-block h-screen align-middle" aria-hidden="true">â€‹</span>
		<div data-testid="loginContainer" class="inline-block dark:text-white w-full max-w-[42.125rem] sm:w-auto overflow-hidden text-left align-middle transition-all transform shadow-xl h-auto md:h-[29.125rem] rounded-xl border-box opacity-100 scale-100">
			<div class="grid grid-cols-7 md:grid-cols-12 h-full relative">
				<div id="station-record-cover" class="login_loginImage__1Djxq bg-cover hidden md:block col-span-5 w-full bg-wynk-dark-dark_popup bg-no-repeat" style="background-image: url()"></div>
				<div class="align-middle bg-wynk-dark-dark_popup col-span-7 px-8 pb-8 pt-10 md:pb-6 md:pl-[2.125rem] md:pr-7 relative flex flex-col justify-between">
					<div x-on:click="jQuery('#station-record-popup').addClass('hidden')" data-testid="loginCrossButton" class="h-6 w-6 right-4 top-4 dark:text-white hover:text-gray-400 cursor-pointer absolute">
						<svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 20 20" fill="currentColor" aria-hidden="true">
							<path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
						</svg>
					</div>

					<div class="inline-block w-full">
                        <div class="text-primary  w-full  rounded-2xl ">
                            <div class="w-full ">
                                
                                <button id="startRecording">Start Recording</button>
                                <button id="stopRecording" disabled>Stop Recording</button>
                                <audio id="audioPlayback" controls style="display: none;"></audio>
                                <button id="uploadRecording" style="display: none;">Upload Recording</button>

                            </div>
                        </div>
                        <div class="h-10"></div>
					</div>
					<div class="hidden md:block">
						<div class="flex justify-start gap-6 items-center">
							<div class="text-xs">{{lang.translate('Available on')}}</div>
							<div>
								<span title="Android App" data-testid="loginRedirectAndroidStore" class="cursor-pointer">
									<span> <img src="/src/front_assets/svg/google-play.svg" /> </span>
								</span>
							</div>
							<div>
								<span data-testid="loginRedirectIOSStore" title="IOS App" class="cursor-pointer">
									<span> <img src="/src/front_assets/svg/apple-store.svg" /> </span>
								</span>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
    <script>
        let mediaRecorder;
        let audioChunks = [];

        document.getElementById('startRecording').addEventListener('click', startRecording);
        document.getElementById('stopRecording').addEventListener('click', stopRecording);
        document.getElementById('uploadRecording').addEventListener('click', uploadRecording);

        async function startRecording() {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            mediaRecorder = new MediaRecorder(stream);
            
            mediaRecorder.ondataavailable = (event) => {
                audioChunks.push(event.data);
            };

            mediaRecorder.onstop = () => {
                const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                const audioUrl = URL.createObjectURL(audioBlob);
                document.getElementById('audioPlayback').src = audioUrl;
                document.getElementById('audioPlayback').style.display = 'block';
                document.getElementById('uploadRecording').style.display = 'block';
            };

            mediaRecorder.start();
            document.getElementById('startRecording').disabled = true;
            document.getElementById('stopRecording').disabled = false;
        }

        function stopRecording() {
            mediaRecorder.stop();
            document.getElementById('startRecording').disabled = false;
            document.getElementById('stopRecording').disabled = true;
        }

        function uploadRecording() {
            const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
            const formData = new FormData();
            formData.append('audio', audioBlob, 'recording.wav');
            formData.append('type', 'StationMedia.create_record');
            formData.append('params[start_at]', jQuery('#stationMediaStart').val());
            formData.append('params[date]', jQuery('#stationMediaStartDate').val());
            formData.append('params[station_id]', {{station.station_id}});

            fetch('/front_api/create', {
                method: 'POST',
                body: formData
            })
            .then(response => response.text())
            .then(result => {
                console.log('Upload successful:', result);
                alert('Upload successful!');
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Upload failed. Please try again.');
            });
        }
    </script>