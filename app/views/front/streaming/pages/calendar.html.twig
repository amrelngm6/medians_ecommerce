
    
    <script>
        /* This is all the JS used and it does only 2 things: */

        /* 1. datalist option render support test (for support info box) */
        addEventListener('load', e => {
            if (+document.querySelector('option').getBoundingClientRect().width)
                document.body.style.setProperty('--list', 'none')
        })

        /* 2. update the --val custom property on dragging slider thumb */
        addEventListener('input', e => {
            let _t = e.target;
            _t.parentNode.style.setProperty('--val', +_t.value)
        })

        /* Absolutely no JS is needed for creating the look of the slider. */
    </script>
    <style>
        #calendar {
            max-width: 900px;
            margin: 40px auto;
        }
    </style>
    <link href='https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/5.10.1/main.min.css' rel='stylesheet' />

    <form action="/front_api/update" class="ajax-form" id="calendar-form">
        <input type="hidden" name="type" value="StationMedia.update" />
        <input type="hidden" name="params[station_media_id]" value="" id="stationMediaId" />
        <input type="hidden" name="params[start_at]" value="" id="stationMediaStartTime" />
        <input type="hidden" name="params[date]" value="" id="stationMediaDate" />
    </form>

    <div class="courses-container">
        <div class="course">
            <div class="course-preview">
                <h6 class="text-sm">{{lang.translate('Station')}}</h6>
                <h2>{{station.name}}</h2>
            </div>
            <div class="course-info">
                <div class="progress-container flex ">
                    <span class="progress-text flex-none">6/9 {{lang.translate("Streaming")}}</span>
                    <div class="progress"></div>
                </div>
                <h6>Chapter 4</h6>
                <h2>Callbacks & Closures</h2>
                <button class="btn py-2"><img src="/src/front_assets/svg/play-active.svg" /></button>
            </div>
        </div>
    </div>

    <div class="w-full flex gap-20">
        <div id="slider-container" class="w-32" >
            
            <div class="absolute top-0 bottom-0" style="max-width: 200px; display: grid;  transform: scale(.4);">

                <!-- put all in a wrapper:-->
                <div class="wrap" role="group" aria-label="slider with ruler" style="display: grid; --min: 1; --val: 30; --max: 60">
                    <!-- slider:-->
                    <input id="r" type="range" list="l" min="1" max="60" />
                    <!-- value display:-->
                    <output for="r"></output>
                    <!-- ruler:-->
                    <datalist id="l">
                        {% set arr = range(0, 12) %}
                        {% for i in range(1, 10) %}
                        <option value="{{((i * 6) - 1) }}" style="--idx: {{((i * 6) - 4)}}" ></option>
                        <option value="{{((i * 6) - 1) }}" style="--idx: {{((i * 6) - 2)}}" ></option>
                        <option value="{{((i * 6)) }}" style="--idx: {{((i * 6))}}" label="{{((i * 6))}}" ></option>

                        {% endfor %}
                        <option value="22" style="--idx: 22"></option>

                    </datalist>
                </div>
                <section class="range-info">
                    <p class="box box--fail box--list">Sorry, it appears your browser has failed displaying the slider ruler.
                        Currently, recent versions of Firefox and Chromium browsers should be able to display it.</p>
                    <p class="box box--warn box--trig">Sorry, it appears your browser does not support trigonometric functions in
                        CSS, so the slider ruler offset won't look ideal. Currently, trigonometric functions are supported in
                        Safari, Firefox and Chromium browsers starting with version 111 when enabling the<strong>Experimental Web
                            Platform features</strong>
                        flag in<kbd>chrome://flags</kbd>.
                    </p>
                    <p class="box box--fail box--cmix">Sorry, it appears your browser does not support<code>color-mix</code>. No
                        support or this features prevents the slider's highlight from responding to changes in value.
                        Currently,<code>color-mix</code>
                        is supported in Safari, Chromium browsers starting with version 111 (version 109 when enabling
                        the<strong>Experimental Web Platform features</strong>
                        flag in<kbd>chrome://flags</kbd>) and Firefox starting with version 111 (version 88 when setting
                        the<kbd>layout.css.color-mix.enabled</kbd>
                        flag to<code>true</code>
                        in<kbd>about:config</kbd>).
                    </p>
                </section>
            </div>
        </div>
        <div class="w-full " id='calendar' style="width: calc(100% - 200px); max-height:calc(100vh - 135px)"></div>
    </div>

    <script src="//cdnjs.cloudflare.com/ajax/libs/fullcalendar/6.1.15/index.global.js" integrity="sha512-3I+0zIxy2IkeeCvvhXUEu+AFT3zAGuHslHLDmM8JBv6FT7IW6WjhGpUZ55DyGXArYHD0NshixtmNUWJzt0K32w==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
        var calendar;
        document.addEventListener('DOMContentLoaded', function() {
            const calendarEl = document.getElementById('calendar');

            calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'timeGridDay',
                slotDuration: '00:30:00', // Time slots every 30 minutes
                allDaySlot: false, // Disable all-day slot
                editable: true,
                droppable: true, 
                nowIndicator: true,
                scrollTime: '{{now}}',
                now: "{{now}}",
                events: 
                [
                    {% for item in station.items %}
                    {
                        title: '{{item.media.name}}',
                        id: '{{item.station_media_id}}',
                        start: '{{item.date|date('Y-m-d')}}T{{item.start_at}}',
                        end: '{{item.date|date('Y-m-d')}}T{{item.start_at|date_modify("+" ~ (item.media.field.duration ?? '1') ~ " seconds")|date("H:i:s")}}'
                    },
                    {% endfor %}
                ],

                dateClick: function(info, i) {
                    
                    jQuery('#station-id').val({{station.station_id}})
                    jQuery("#stationMediaStart").val(info.dateStr.substr(11, 8));
                    jQuery("#stationMediaStartDate").val(info.dateStr.substr(0, 10));
                    jQuery('#find-track-popup').toggleClass('hidden')

                    console.log('Date: ' + info.dateStr.substr(0, 10));
                },
                
                eventDragStop: function(info) {
                    jQuery("#stationMediaId").val(info.event.id);
                },
                eventDrop: function(info) {
                    jQuery("#stationMediaDate").val(info.event.startStr.substr(0, 10));
                    jQuery("#stationMediaStartTime").val(info.event.startStr.substr(11, 8));
                    setTimeout(function(){
                        jQuery("#calendar-form").submit();
                    }, 50)

                },
                
                eventResize: function(info) {
                    alert("This item depends on the media duration");
                    info.revert();
                }
            });

            calendar.render();

            {# var slider = document.getElementById('slotDurationRange');
            var durationValue = document.getElementById('durationValue');

            slider.addEventListener('input', function() {
                durationValue.textContent = newDuration;
                updateSlotDuration();
            }); #}

        });
        
                
        function updateSlotDuration (newDuration, calendar) 
        {
            if (newDuration < 1)
                return;

            // Convert the slider value to the appropriate format for slotDuration (HH:mm:ss)
            var slotDuration = '00:' + (newDuration.length === 1 ? '0' : '') + newDuration + ':00';
            
            // Reconfigure the calendar with the new slotDuration
            calendar.setOption('slotDuration', slotDuration);
            
        }
        
        addEventListener('load', e => {
            if(+document.querySelector('option').getBoundingClientRect().width) {
                    document.body.style.setProperty('--list', 'none')
            }
        })

        /* 2. update the --val custom property on dragging slider thumb */
        jQuery(document).on('input', 'input[type=range]' , function(e) {
            let _t = e.target;
            _t.parentNode.style.setProperty('--val', +_t.value)
            console.log(_t.value)
            updateSlotDuration(_t.value, calendar)
            calendar.scrollToTime( "{{'now'| date('H:i:00')}}");

        })

    </script>


    {% include 'views/front/' ~ template ~ '/popups/find-track.html.twig' %}
