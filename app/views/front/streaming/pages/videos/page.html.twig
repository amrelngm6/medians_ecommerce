<div class=" w-full  lg:h-screen gradient-top-overlay" style="min-height: 300px; max-height: calc(100vh - 70px)">


	<figure id="videoContainer" class="w-full  shadow-xl absolute top-0 left-0 ">
		<video id="my-video" class="w-full h-screen" crossorigin="anonymous" >
			<source src="{{item.main_file.path}}" type="video/webm"/>
			<source src="{{item.main_file.path}}" type="video/mp4"/>
		</video>
		{# <canvas id="videoCanvas" ondragstart="isDragging = true" width="300" height="300" style="bottom: 0; z-index: 9999" class="hidden fixed z-10 "></canvas> #}

		<div id="video-controls" class="flex px-6 gap-4 text-gray-400 absolute bottom-0 left-0 w-full" data-state="hidden">
			<button class="play-video brightness-200" id="play" type="button" data-state="play"><img src="/src/front_assets/svg/video-play.svg" class="w-4 brightness-200"/></button>
			<button class="pause-video brightness-200" id="pause" type="button" data-state="pause"><img src="/src/front_assets/svg/video-pause.svg" class="w-4 brightness-200"/></button>
			<div id="current-time"></div>
			<div class="progress w-full">
				<progress id="progress" class="bg-gray-800 w-full rounded-2xl overflow-hidden " value="0" min="0" step="1" max="">
					<span id="progress-bar"></span>
				</progress>
			</div>
			<span id="video-duration"></span>
			<div class="volume relative show-child ">
				<button class="brightness-200" id="mute" type="button" style="padding-top: 5px" data-state="mute"><img src="/src/front_assets/svg/video-volume.svg" class="w-4 brightness-200"/></button>
				<input type="range" id="video-volume" min="0" step=".1" max="1" class="show-on-hover absolute bottom-0 h-2 left-1 w-20" style="transform-origin: left; transform: rotate(270deg);"/>
			</div>
			<button id="fs" class="fullscreen " id="pause" type="button" data-state="go-fullscreen"><img src="/src/front_assets/svg/fullscreen.svg" class="w-4 brightness-200"/></button>
		</div>
	</figure>

</div>
<div class=" w-full h-40 absolute top-0 left-0 gradient-overlay" style="z-index:1; "></div>

{% set customer = app.customer_auth() %}
<div class=" w-full  relative" id="video-overlay">
	<div class="absolute lg:bottom-40 lg:left-40 left-10 bottom-10  z-10 w-2/3 text-gray-100 dark:text-gray-400">
		<h1 class="lg:text-6xl text-4xl text-white">{{item.name}}</h1>

		{% if item.customer_id == customer.customer_id %}
			<div class="{{ following == null ? '' : ' hidden'}} float-right" x-on:click="jQuery('#heart-{{item.customer_id}}').addClass('hidden'); jQuery('#unheart-{{item.customer_id}}').removeClass('hidden')" id="heart-{{item.customer_id}}">
				<a href="/studio" class="ajax-load hover:border-orange-300 hover:text-orange-300 border  border border-4 border-white rounded-full py-2 px-6">
					<span>{{lang.translate('Edit')}}</span>
				</a>
			</div>
		{% else  %}
			{% set liked = item.liked(customer.customer_id).count() %}
			<div class="{{ liked == null ? '' : ' hidden'}} float-right" x-on:click="jQuery('#heart-{{item.media_id}}').addClass('hidden'); jQuery('#unheart-{{item.media_id}}').removeClass('hidden')" id="heart-{{item.media_id}}">
				<a href="/front_api/create?type=Like.media&params[item_id]={{item.media_id}}" data-params="{item_id: {{item.media_id}} }" class="ajax-link hover:border-orange-300 hover:text-orange-300 border border-4 border-white rounded-full py-2 px-6">
					<span>{{lang.translate('Like')}}</span>
				</a>
			</div>

			<div class="{{ liked == null ? 'hidden' : '' }} float-right" x-on:click="jQuery('#unheart-{{item.media_id}}').addClass('hidden'); jQuery('#heart-{{item.media_id}}').removeClass('hidden')" id="unheart-{{item.media_id}}">
				<a href="/front_api/delete?type=Like.media&params[item_id]={{item.media_id}}" data-params="{item_id: {{item.media_id}} }" class="ajax-link hover:border-orange-300 hover:text-orange-300 border border-4 border-white rounded-full py-2 px-6">
					<span>{{lang.translate('Unlike')}}</span>
				</a>
			</div>
		{% endif %}

		<div class="w-full flex gap-4 ">

			<span class="text-sm text-gray-100">{{lang.translate('Likes')}} : {{item.likes|length}} </span>
			<span class="text-sm text-gray-100">{{lang.translate('Comments')}} : {{item.comments|length}} </span>
			<span x-on:click="jQuery('#share-popup').removeClass('hidden')" class="cursor-pointer mx-2 text-sm text-gray-100"><img src="/src/front_assets/svg/share.svg" class="w-5"></span>

		</div>

	</div>
</div>
<div class="pb-4  h-full overflow-hidden rounded-2xl" x-data="{is_slide: 'slide'}">

	<div class="relative z-10 w-full  gap-4 bg-white dark:bg-gray-900 rounded-2xl p-8 h-full">

		<span class="block pt-10 text-sm text-gray-500">{{lang.translate('About')}}</span>
		<div class="text-primary overflow-auto" style="max-height: 400px;">
			<div class="dark:text-gray-400 py-4">{{item.field.about|raw| nl2br  }}</div>
		</div>

	</div>

</div>


 <script>
$(function(){
    // var myVideo = document.createElement("video");
var myVideo = document.getElementById("my-video");
const processor = {
  timerCallback() {
    if (myVideo.paused || myVideo.ended) {
      return;
    }
    this.computeFrame();
    setTimeout(() => {
      this.timerCallback();
    }, 16); // roughly 60 frames per second
  },

  doLoad() {
    {# this.c1 = document.getElementById("videoCanvas"); #}
    {# this.ctx1 = this.c1.getContext("2d"); #}

    /** On time update */
    myVideo.addEventListener(
        "timeupdate",
        () => {
            
            jQuery('#current-time').html(convertToTime(myVideo.currentTime))
            progress.value = myVideo.currentTime;

        })
        
    /** On Play video */
    myVideo.addEventListener(
      "loadedmetadata",
      () => {
        jQuery(videoCanvas).removeClass('hidden')

            jQuery('#video-duration').html(convertToTime(myVideo.duration))

          progress.setAttribute("max", myVideo.duration);
      },
      false,
    );
        
    /** On Play video */
    myVideo.addEventListener(
      "play",
      () => {
		jQuery('#video-duration').html(convertToTime(myVideo.duration))
		progress.setAttribute("max", myVideo.duration);

        this.width = 300;
        this.height =  200;
        {# this.timerCallback(); #}
		jQuery('#video-overlay').fadeOut(200)
		videoContainer.style.zIndex = 999
      },
      false,
    );
        
    /** On Pause video */
    myVideo.addEventListener(
      "pause",
      () => {
		jQuery('#video-overlay').fadeIn(200)
		videoContainer.style.zIndex = 0
      },
      false,
    );
        
    /** On Play video */
    myVideo.addEventListener(
      "click",
      () => {

        if (myVideo.paused) 
			myVideo.play()
		else 	
			myVideo.pause()
      },
      false,
    );



    /** On change current time */
    progress.addEventListener( "click" , (e) => {

        const rect = progress.getBoundingClientRect();
        const pos = (e.pageX - rect.left) / progress.offsetWidth;
        myVideo.currentTime = pos * myVideo.duration;
        // myVideo.currentTime = 3.10;
        myVideo.play()
    });




    let isDragging = false;
    let offsetX = 0;
    let offsetY = 0;

    videoCanvas.addEventListener('mousedown', function (e) {
        isDragging = true;
        videoCanvas.style.cursor = 'grabbing';

        // Calculate offset position to handle dragging smoothly
        offsetX = e.clientX - videoCanvas.getBoundingClientRect().left;
        offsetY = e.clientY - videoCanvas.getBoundingClientRect().top;
    });

    // Function to stop dragging
    window.addEventListener('mouseup', function () {
        isDragging = false;
        videoCanvas.style.cursor = 'grab';
    });

    videoCanvas.addEventListener('ondragstart', function(){
        isDragging = true;
        videoCanvas.style.cursor = 'grabbing';
    })
    
    
    // Function to drag the canvas
    window.addEventListener('mousemove', function (e) {
        if (isDragging) {
            // Calculate the new position
            const left = e.clientX - offsetX;
            const top = e.clientY - offsetY;

            // Update canvas position
            videoCanvas.style.left = `${left}px`;
            videoCanvas.style.top = `${top + 10}px`;

            // Set the position to absolute once dragging starts
            videoCanvas.style.position = 'fixed';
            videoCanvas.style.transform = 'none';
        }
    });

    
    
  },

  computeFrame() {
    this.ctx1.drawImage(myVideo, 0, 0, this.width, this.height);
    const frame = this.ctx1.getImageData(0, 0, this.width, this.height);
    const l = frame.data.length / 4;

    for (let i = 0; i < l; i++) {
      const grey =
        (frame.data[i * 4 + 0] +
          frame.data[i * 4 + 1] +
          frame.data[i * 4 + 2]) /
        3;

    //   frame.data[i * 4 + 0] = grey;
    //   frame.data[i * 4 + 1] = grey;
    //   frame.data[i * 4 + 2] = grey;
    }
    this.ctx1.putImageData(frame, 0, 0);

    return;
  },
};

const playpause = document.createElement("playpause");

window.addEventListener('load', function(){

    if (myVideo.canPlayType("video/mp4")) {
        myVideo.setAttribute("src", "{{item.main_file.path}}");
        processor.doLoad();
    }

    // myVideo.width = 480;
    // myVideo.height = 600;

})

jQuery(document).on('click', '.pause-video', function(){
    myVideo.pause()
})
jQuery(document).on('click', '.play-video', function(){
    myVideo.play()
})

jQuery(document).on('click', '#video-volume', function(){
    myVideo.volume = jQuery(this).val()
})
jQuery(document).on('click', '.fullscreen', function(){
    if (!window.screenTop && !window.screenY) {
		setFullscreenData(false);
	} else {
		// The document is not in fullscreen mode
		videoContainer.requestFullscreen();
		setFullscreenData(true);
	}
})

jQuery(document).on('dblclick', '#videoCanvas,video', function(){
    videoContainer.requestFullscreen();
    setFullscreenData(true);
} )
})
    </script>

